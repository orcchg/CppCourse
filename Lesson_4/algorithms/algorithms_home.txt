1. Let's imagine that you have only 500 bytes of memory and a large text file ("lorem.txt"),
which cannot be entirely loaded into memory. Write a program that sorts that file lexicographically
and writes the sorted output into another file. You should not make lots of temporary files!
Use std::sort(), std::merge() and std::lexicographical_compare() from <algorithm> header file.

2. Print the words (from "lorem.txt") corresponding to the max and min values of hash codes.

3. Write template class Heap<T> which represents a sequence with a "heap-property".
It could be eigther minimal heap or maximal heap, set this property as a second template parameter.
Write methods: begin(), end(), push_heap(), pop_heap(), compare with corresponding methods
from <algorithm>: std::push_heap(), std::pop_heap(). Use std::is_heap() to test, whether your class
represents a heap. Write unit-tests.

4. Make class LessComparator:

template <typename T>
struct LessComparator {
  static size_t counter;
  bool operator()(const T& lhs, const T& rhs);
};

This class is able to compare to objects of type T and counts number of compares.
Input an array of N integers from stdin and sort it using std::sort() and LessComparator.
Print number of compares as a function of N.

✶ ✹ ✷ ✸ ✺ ✽ ✻ ✼ ✾ ✶✵
5*. (LIS) Given 1 <= N <= 1000 and sequence of signed integer values a0, a1, a2, ..., aN  (|ai| <= 10^9)
find and print the longest increasing subsequence b0, b1, b2, ..., bk, such that b0 <= b1 <= b2 <= ... <= bk.
If there exist everal LIS, print those where b0 is ai1, such that i1 is minimal. If there exist everal LIS with
equal i1, print those where i2 is minimal, etc.

For example:
1 4 2 3 5 8 6 7 9 10   -->  2 3 5 8
1 2 3 4 5              -->  1 2 3 4 5
100                    -->  100

5**. (LAS) Same a above, but find and print the longest altering subsequense b0, b1, b2, ..., bk, such that
for any three adjacent elements bi-1, bi, bi+1 either bi-1 < bi and bi > bi+1 or bi-1 > bi and bi < bi+1.

For example:
1 4 2 3 5 8 6 7 9 10   -->  1 4 2 8 6 7
1 2 3 4 5              -->  1 2
100                    -->  100

Highlight the subsequense as shown in 'algorithms_10.cpp'.

