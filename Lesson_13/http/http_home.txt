0. Loop over all nodes until it terminates, rewrite 'http_1_2.cpp' accordingly.
This should support arbitrary (instead of hardcoded one) number of items in XML response.
(see 'http_1_3.cpp' for solution).

1. Rewrite 'http_1_2.cpp', use FirstChild("name") instead of Child(index) member-function.
For url pass "url", for id pass "id", for source_url pass "source_url".

2. This image url has denied access: url='http://25.media.tumblr.com/tumblr_lokcmz6izk1qz7hmlo1_500.jpg'
Write a program which handles it with error logs.

3. Make request to URL_CATAPI which returns a list of all the active categories.
Read API documentation carefully. Write a class representing a single response model.

4. For URL_CATAPI retrieve an API_KEY and make the following requests:
  - favourite an image
  - get all the favourites
  - get your account's overview

5*. Replace TinyXML with RapidXML (see 'http://rapidxml.sourceforge.net/' for details).
Provide necessary build scripts and rewrite 'http_1_3.cpp' to it.

6. Process Json with 100 posts in a loop and print a list of their ids and first 5 words from body.
(see 'http_2_2.cpp for solution). Also, rewrite it using 'Value::ConstValueIterator' iterators
instead of integer indices; use iterators to loop over a Post object (see 'http_2_3.cpp' for solution).

7. Request a list of users from JSON_PLACEHOLDER_API and record them into User model.

8. Write a unit-test and test 'convertToJson(Post)' function in 'http_4.cpp' using RapidJson.
Make sure all fields are present and have correct types and values, compare it to any item from response.

9. Update yet existing Post making a PUT with json-body request to JSON_PLACEHOLDER_API.
(see 'http_4_1.cpp' for solution). Same for DELETE request (see 'http_4_2.cpp' for solution).

10. Make a simple HTTP request to the 'www.thecatapi.com' as described in URL_CATAPI.
Do not use 'curlpp' or something - make a low-level TCP/IP connection, send a request wrapped into HTTP block
and receive a response, print out it with the body if presents (see 'http_3_2.cpp' for solution).

10.1. Re-write 'http_3.cpp' filling raw 'sockaddr_in' structure instead of use of 'getaddrinfo()' function.

10.2. Solve task 10 and write unit-test making request and retrieving response via 'curlpp'.

10.3. Re-write 'http_3_1.cpp' using C++ wrapper for 'http-parser' C-library (see 'https://github.com/AndreLouisCaron/httpxx').
Bake this library into Project's build system providing all necessary CMake bindings.

10.4. Provide method 'parseResponse()' for 'MyParser' and use it in 'http_3_2_my.cpp' accordingly.

