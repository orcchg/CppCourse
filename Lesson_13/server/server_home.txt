1. Below is the table with the classes of public networks:

Class	Leftmost bits	Start address	Finish address
A	0xxx	         0.0.0.0        127.255.255.255
B	10xx	         128.0.0.0	191.255.255.255
C	110x	         192.0.0.0	223.255.255.255
D	1110	         224.0.0.0	239.255.255.255
E	1111	         240.0.0.0	255.255.255.255

Calculate the number of different adresses within each class of network.

1.5. Try to use 'server_1.cpp' with older 'client_0.cpp'; 'server_2.cpp' (or variations) with older
'client_0.cpp' or 'client_1.cpp' and vice versa.

2. Make some refactoring for 'server_2.cpp' implementing non-blocking main thread Server.
This Server should receive user commands in main thread and send terminating signal to all peers.
(see 'server_2_1.cpp' for solution). It will probably need some minor changes in 'client_2.cpp'
(see 'client_2_1.cpp' for such changes).

3. Use function 'getaddrinfo()' to fill 'sockaddr' structure instead of manual filling
(see 'server_2_2.cpp' and 'client_2_2.cpp' for solutions).

3.1. Loop through linked list returned with 'getaddrinfo()' in 'server_2_2.cpp' sample
and choose the first valid connection instead of just the first one.

4. Create multi-channel chat server (see 'server_2_3.cpp' for solution).
Modify protocol accordingly (see 'protocol_1.h' and 'protocol_1.cpp' for solution).

5. Run 'server_3.cpp' and try to connect to it using either console client ('client_3.cpp' for example)
or Web-browser. Compare request data received by server and how Web-browser interpretes response body.

5.1. Extract method from GET request start line on Server side and pass it to response's body providing
the following string: "Hello, <method>" (omit angle brackets). Do not forget to adjust 'Content-length' header as well.

6. Use http protocol instead of hand-written one in multi-channel chat server
(see 'server_4.cpp' for solution), send messages and registration requests from client using http protocol
(see 'client_4.cpp' for solution). Use JSON to wrap message info before sending / receiving.
Provide all necessary convertions between resulting JSON and the structure you use to store peer messages
(you can re-use 'Protocol' or 'MCProtocol' structures, convert them to / from JSON accordingly,
see 'convert_json.cpp' for solution). Parse it with 'rapidjson' or any other convenient library.

6.1. Instead of JSON, use XML to send / receive messages' body via http protocol.
Provide all necessary convertions between resulting XML and the structure you use to store peer messages
(you can re-use 'Protocol' or 'MCProtocol' structures, convert them to / from XML accordingly).
Parse it with 'tinyxml' or any other convenient library.

